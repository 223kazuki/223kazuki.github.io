<?xml version='1.0' encoding='UTF-8'?>
<rss version='2.0' xmlns:atom='http://www.w3.org/2005/Atom'>
<channel>
<atom:link href='https://223kazuki.github.io/' rel='self' type='application/rss+xml'/>
<title>
223Log
</title>
<description>
223 Log
</description>
<link>
https://223kazuki.github.io/
</link>
<generator>
clj-rss
</generator>
<item>
<link>
https://223kazuki.github.io/re-integrant.html
</link>
<guid>
https://223kazuki.github.io/re-integrant.html
</guid>
<pubDate>
Mon, 10 Sep 2018 00:00:00 +0000
</pubDate>
<title>
How to modularize ClojureScript SPA
</title>
<description>
In this post, I will introduce a pattern to modularize Single Page Application written in ClojureScript. Sample project is bellow.
https://github.com/223kazuki/cljs-dapp
</description>
<author>
rixi223.kazuki@gmail.com
</author>
</item>
<item>
<link>
https://223kazuki.github.io/lacinia-app-tips.html
</link>
<guid>
https://223kazuki.github.io/lacinia-app-tips.html
</guid>
<pubDate>
Tue, 29 Jan 2019 00:00:00 +0000
</pubDate>
<title>
Tips for lacinia app development
</title>
<description>
Recently, I tried Lacinia because many clojurians and companies begin to use it. It's one of the most exciting clojure library today. I'm very fascinated by it. But while developing Lacinia application, I also met some difficulties. In this post, I introduce how I resolved those difficulties as Tips for lacinia app development.
As I don't intend to introduce Lacinia itself, I don't explain what Lacinia is. Please read [Lacinia document](https://lacinia.readthedocs.io/en/latest/) and try tutorial first.
</description>
<author>
rixi223.kazuki@gmail.com
</author>
</item>
<item>
<link>
https://223kazuki.github.io/start-blog.html
</link>
<guid>
https://223kazuki.github.io/start-blog.html
</guid>
<pubDate>
Tue, 19 Sep 2017 00:00:00 +0000
</pubDate>
<title>
ブログ始めました
</title>
<description>
ブログ始めました
</description>
<author>
rixi223.kazuki@gmail.com
</author>
</item>
<item>
<link>
https://223kazuki.github.io/emacs-on-bash-on-windows.html
</link>
<guid>
https://223kazuki.github.io/emacs-on-bash-on-windows.html
</guid>
<pubDate>
Fri, 06 Oct 2017 00:00:00 +0000
</pubDate>
<title>
Emacs on Bash on Windows と Windows でクリップボード共有
</title>
<description>
Emacs on Bash on Windows と Windows でクリップボード共有
</description>
<author>
rixi223.kazuki@gmail.com
</author>
</item>
<item>
<link>
https://223kazuki.github.io/ipfs-clojurescript.html
</link>
<guid>
https://223kazuki.github.io/ipfs-clojurescript.html
</guid>
<pubDate>
Sat, 06 Oct 2018 00:00:00 +0000
</pubDate>
<title>
Using IPFS from ClojureScript SPA
</title>
<description>
Recently I had a chance to use IPFS when I developed Ethereun DApp. So I played with it.
Repository https://github.com/223kazuki/ipfs-chain
</description>
<author>
rixi223.kazuki@gmail.com
</author>
</item>
<item>
<link>
https://223kazuki.github.io/re-integrant-app.html
</link>
<guid>
https://223kazuki.github.io/re-integrant-app.html
</guid>
<pubDate>
Mon, 01 Oct 2018 00:00:00 +0000
</pubDate>
<title>
Develop ClojureScript SPA with combination of integrant and re-frame
</title>
<description>
In this post, I'll introduce how to develop ClojureScript Single Page Application by using the combination of integrant and re-frame.
I also introduced that in [the previous post](https://223kazuki.github.io/re-integrant.html). But as the previous example was special case, Ethereum DApp, it was a little complex to understand. So I develop an example again in pure cljs.
</description>
<author>
rixi223.kazuki@gmail.com
</author>
</item>
<item>
<link>
https://223kazuki.github.io/reconsider-om-next.html
</link>
<guid>
https://223kazuki.github.io/reconsider-om-next.html
</guid>
<pubDate>
Thu, 22 Dec 2016 00:00:00 +0000
</pubDate>
<title>
Om Next 振り返り
</title>
<description>
Om Next 振り返り
</description>
<author>
rixi223.kazuki@gmail.com
</author>
</item>
</channel>
</rss>
